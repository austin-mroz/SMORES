#!python
import argparse
import contextlib
import csv
import os
import pathlib
import subprocess


def main() -> None:
    args = _get_command_line_arguments()
    args.output_directory.mkdir(parents=True, exist_ok=True)

    with open(args.input_file) as input_file:
        with open(args.output_directory / "xyz_files.csv", "w") as output_file:
            reader = csv.DictReader(input_file)
            assert reader.fieldnames is not None
            writer = csv.DictWriter(output_file, fieldnames=reader.fieldnames)
            writer.writeheader()

            for row in reader:
                calculation_directory = args.output_directory.joinpath(
                    f"{row['reaction_name']}_{row['catalyst_name']}_"
                    f"{row['substituent_name']}"
                )
                _run_xtb(calculation_directory, pathlib.Path(row["xyz_file"]))
                new_row = dict(row)
                new_row["xyz_file"] = calculation_directory.joinpath(
                    "xtbopt.xyz",
                ).resolve()
                writer.writerow(new_row)


def _get_command_line_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Optimize structures with xtb.",
    )
    parser.add_argument(
        "-i",
        "--input_file",
        help=(
            'A csv file with columns: "reaction_name", "catalyst_name", '
            '"xyz_file", "dummy_index", "attached_index"'
        ),
        type=pathlib.Path,
        default=pathlib.Path.cwd() / "1_output" / "xyz_files.csv",
    )
    parser.add_argument(
        "-o",
        "--output_directory",
        help="The directory into which output files are written.",
        type=pathlib.Path,
        default=pathlib.Path.cwd() / "2_output",
    )
    return parser.parse_args()


def _run_xtb(
    working_directory: pathlib.Path,
    xyz_file: pathlib.Path,
) -> None:

    working_directory.mkdir(parents=True, exist_ok=True)
    with _current_working_directory(working_directory):
        subprocess.run(
            ["xtb", str(xyz_file), "--opt"],
            capture_output=True,
            check=True,
        )


@contextlib.contextmanager
def _current_working_directory(directory: pathlib.Path):
    original_directory = pathlib.Path.cwd()
    try:
        os.chdir(directory)
        yield
    finally:
        os.chdir(original_directory)


if __name__ == "__main__":
    main()
