#!python
import argparse
import csv
import itertools
import logging
import pathlib
import re
import typing
from dataclasses import dataclass

import rdkit.Chem.AllChem as rdkit
import stk


def _get_command_line_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Generate the SMILES of systems which are to be validated."
    )
    parser.add_argument(
        "-o",
        "--output_file",
        type=pathlib.Path,
        default=pathlib.Path.cwd() / "output_1" / "smiles.csv",
    )
    return parser.parse_args()


def build_stk_molecule(
    parent_group: str,
    substituent: str,
    output_directory: pathlib.Path,
) -> stk.ConstructedMolecule:

    parent_mol = stk.BuildingBlock(
        smiles=parent_group,
        functional_groups=[stk.BromoFactory()],
    )
    substituent_mol = stk.BuildingBlock(
        smiles=substituent,
        functional_groups=[stk.BromoFactory()],
    )
    full_catalyst = stk.ConstructedMolecule(
        topology_graph=stk.polymer.Linear(
            building_blocks=(parent_mol, substituent_mol),
            repeating_unit="AB",
            num_repeating_units=1,
            optimizer=stk.Collapser(scale_steps=False),
        ),
    )
    mol_file_name = output_directory.joinpath("stk_constructed_molecule.mol")

    full_catalyst.write(str(mol_file_name))

    rdmol = rdkit.MolFromMolFile(str(mol_file_name))

    return rdkit.MolToSmiles(rdmol)


def gen_molecule_smiles(
    replacement_groups: list,
    parent_group: str,
    substituent: str,
    output_directory: pathlib.Path,
) -> str:

    replacement_group_placement_count = 0
    for replacement_group in replacement_groups:
        replacement_group_placement_count += len(
            re.findall(replacement_group, parent_group)
        )

    try:
        parent_group_smiles = build_stk_molecule(
            parent_group, substituent, output_directory
        )

        if replacement_group_placement_count > 1:
            parent_group_smiles = parent_group_smiles.replace("Lu", "Br")
            parent_group_smiles = build_stk_molecule(
                parent_group_smiles, substituent, output_directory
            )
    except:
        logging.warning(f"{output_directory} is unparseable by rdkit")
        parent_group_smiles = None

    return parent_group_smiles


def main() -> None:
    cli_args = _get_command_line_arguments()

    substituents = (
        Substituent(
            name="H",
            smiles="[DUMMY]",
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="Me",
            smiles="[DUMMY]C",
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="Et",
            smiles="[DUMMY]CC",
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="Ph",
            smiles="[DUMMY]c1ccccc1",
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="Bn",
            smiles="[DUMMY]Cc1ccccc1",
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="CH2-iPr",
            smiles="[DUMMY]C(C)CC",
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="CH2-tBu",
            smiles="[DUMMY]C(C)(C)CC",
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="CHPr2",
            smiles="CCCC([DUMMY])CCC",
            dummy_index=4,
            attached_index=3,
        ),
        Substituent(
            name="Cy",
            smiles="N#C[DUMMY]",
            dummy_index=2,
            attached_index=1,
        ),
        Substituent(
            name="CH(i-Pr)2",
            smiles="CC(C)C([DUMMY])C(C)C",
            dummy_index=4,
            attached_index=3,
        ),
        Substituent(
            name="CHEt2",
            smiles="CCC([DUMMY])CC",
            dummy_index=3,
            attached_index=2,
        ),
        Substituent(
            name="CEt3",
            smiles="CCC([DUMMY])(CC)CC",
            dummy_index=3,
            attached_index=2,
        ),
        Substituent(
            name="i-Pr",
            smiles="[DUMMY](C)CC",
            dummy_index=0,
            attached_index=1,
        ),
    )
    catalysts = (
        Catalyst(
            name="",
            reaction_name="",
            smiles="",
        ),
    )

    with open(cli_args.output_file, "w") as csv_file:
        writer = csv.DictWriter(
            csv_file,
            fieldnames=[
                "reaction_name",
                "catalyst_name",
                "substituent_name",
                "dummy_index",
                "attached_index",
            ],
        )
        writer.writerows(_get_molecule_smiles(catalysts, substituents))


class CsvRow(typing.TypedDict):
    reaction_name: str
    catalyst_name: str
    substituent_name: str
    dummy_index: int
    attached_index: int


@dataclass(frozen=True, slots=True)
class Substituent:
    name: str
    smiles: str
    dummy_index: int
    attached_index: int


@dataclass(frozen=True, slots=True)
class Catalyst:
    name: str
    reaction_name: str
    smiles: str


def _get_molecule_smiles(
    catalysts: typing.Iterable[Catalyst],
    substituents: typing.Iterable[Substituent],
) -> typing.Iterator[CsvRow]:

    for catalyst, substituent in itertools.product(catalysts, substituents):
        pass


if __name__ == "__main__":
    main()
