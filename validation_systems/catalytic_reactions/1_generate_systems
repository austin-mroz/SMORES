#!python
import argparse
import csv
import itertools
import pathlib
import typing
from dataclasses import dataclass

import stk


def _get_command_line_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Generate the SMILES of systems which are to be validated."
    )
    parser.add_argument(
        "-o",
        "--output_directory",
        type=pathlib.Path,
        default=pathlib.Path.cwd() / "1_output",
    )
    return parser.parse_args()


def main() -> None:
    cli_args = _get_command_line_arguments()
    cli_args.output_directory.mkdir(parents=True, exist_ok=True)

    br = Substituent(
        name="H",
        molecule=stk.BuildingBlock(
            smiles="Br",
            functional_groups=[stk.BromoFactory()],
        ),
        dummy_index=0,
        attached_index=1,
    )
    br.molecule._core_ids = (0,)

    substituents = (
        br,
        Substituent(
            name="Me",
            molecule=stk.BuildingBlock("BrC", [stk.BromoFactory()]),
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="Et",
            molecule=stk.BuildingBlock("BrCC", [stk.BromoFactory()]),
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="Ph",
            molecule=stk.BuildingBlock("Brc1ccccc1", [stk.BromoFactory()]),
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="Bn",
            molecule=stk.BuildingBlock("BrCc1ccccc1", [stk.BromoFactory()]),
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="CH2-iPr",
            molecule=stk.BuildingBlock("BrCC(C)CC", [stk.BromoFactory()]),
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="CH2-tBu",
            molecule=stk.BuildingBlock("BrC(C)(C)CC", [stk.BromoFactory()]),
            dummy_index=0,
            attached_index=1,
        ),
        Substituent(
            name="CHPr2",
            molecule=stk.BuildingBlock("CCCC(Br)CCC", [stk.BromoFactory()]),
            dummy_index=4,
            attached_index=3,
        ),
        Substituent(
            name="Cy",
            molecule=stk.BuildingBlock("N#CBr", [stk.BromoFactory()]),
            dummy_index=2,
            attached_index=1,
        ),
        Substituent(
            name="CH(i-Pr)2",
            molecule=stk.BuildingBlock(
                smiles="CC(C)C(Br)C(C)C",
                functional_groups=[stk.BromoFactory()],
            ),
            dummy_index=4,
            attached_index=3,
        ),
        Substituent(
            name="CHEt2",
            molecule=stk.BuildingBlock("CCC(Br)CC", [stk.BromoFactory()]),
            dummy_index=3,
            attached_index=2,
        ),
        Substituent(
            name="CEt3",
            molecule=stk.BuildingBlock("CCC(Br)(CC)CC", [stk.BromoFactory()]),
            dummy_index=3,
            attached_index=2,
        ),
        Substituent(
            name="i-Pr",
            molecule=stk.BuildingBlock("BrC(C)CC", [stk.BromoFactory()]),
            dummy_index=0,
            attached_index=1,
        ),
    )
    catalysts = (
        Catalyst(
            name="oxazoline-proline",
            reaction_name="nhk_allylation",
            smiles=(
                "CC(C)[C@H](NC(=O)C1CCCN1C(=O)OBr)C3=N[C@H](Cc2ccccc2)CO3"
            ),
        ),
        Catalyst(
            name="quinoline-proline",
            reaction_name="nhk_propargylation",
            smiles="O=C(NCc2cc(Br)c1ccccc1n2)C3CCCN3C(=O)OBr",
        ),
        Catalyst(
            name="reactant",
            reaction_name="desymmetrization",
            smiles="Oc2ccc(C(Br)c1ccc(O)cc1)cc2",
        ),
        Catalyst(
            name="product",
            reaction_name="desymmetrization",
            smiles="CC(=O)Oc2ccc(C(Br)c1ccc(O)cc1)cc2",
        ),
        Catalyst(
            name="nhk_allylation",
            reaction_name="oxazolin-proline-library",
            smiles="O=C(CC1CCCN1C(=O)OBr)N[C@H](Br)C2=NCCO2",
        ),
    )

    with open(cli_args.output_directory / "xyz_files.csv", "w") as csv_file:
        writer = csv.DictWriter(
            csv_file,
            fieldnames=[
                "reaction_name",
                "catalyst_name",
                "substituent_name",
                "xyz_file",
                "dummy_index",
                "attached_index",
            ],
        )
        for molecule in _get_molecules(catalysts, substituents):
            xyz_file = cli_args.output_directory / (
                f"{molecule.reaction_name}_"
                f"{molecule.catalyst_name}_{molecule.substituent_name}.xyz"
            )
            stk.XyzWriter().write(molecule.molecule, str(xyz_file))
            writer.writerow(
                {
                    "reaction_name": molecule.reaction_name,
                    "catalyst_name": molecule.catalyst_name,
                    "substituent_name": molecule.substituent_name,
                    "xyz_file": xyz_file.resolve(),
                    "dummy_index": molecule.dummy_index,
                    "attached_index": molecule.attached_index,
                },
            )


@dataclass(frozen=True, slots=True)
class ValidationMolecule:
    reaction_name: str
    catalyst_name: str
    molecule: stk.Molecule
    substituent_name: str
    dummy_index: int
    attached_index: int


@dataclass(frozen=True, slots=True)
class Substituent:
    name: str
    molecule: stk.BuildingBlock
    dummy_index: int
    attached_index: int


@dataclass(frozen=True, slots=True)
class Catalyst:
    name: str
    reaction_name: str
    smiles: str


def _get_molecules(
    catalysts: typing.Iterable[Catalyst],
    substituents: typing.Iterable[Substituent],
) -> typing.Iterator[ValidationMolecule]:

    for catalyst, substituent in itertools.product(catalysts, substituents):
        stk_catalyst = stk.BuildingBlock(catalyst.smiles)
        while catalyst_fgs := tuple(
            stk.BromoFactory().get_functional_groups(stk_catalyst)
        ):
            constructed = stk.ConstructedMolecule(
                topology_graph=stk.polymer.Linear(
                    building_blocks=(
                        stk_catalyst.with_functional_groups([catalyst_fgs[0]]),
                        substituent.molecule,
                    ),
                    repeating_unit="AB",
                    num_repeating_units=1,
                )
            )
            stk_catalyst = stk.BuildingBlock.init_from_molecule(constructed)
        yield ValidationMolecule(
            reaction_name=catalyst.reaction_name,
            catalyst_name=catalyst.name,
            molecule=stk.BuildingBlock(
                smiles=stk.Smiles().get_key(stk_catalyst),
            ),
            substituent_name=substituent.name,
            dummy_index=substituent.dummy_index,
            attached_index=substituent.attached_index,
        )


if __name__ == "__main__":
    main()
