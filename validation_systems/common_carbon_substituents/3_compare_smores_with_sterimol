#!python
import argparse
import csv
import enum
import pathlib
import typing
from dataclasses import dataclass

import morfeus

import smores

_OUTPUT_CSV_COLUMNS = (
    "name",
    "smiles",
    "xyz_file",
    "dummy_index",
    "attached_index",
    "smores_L",
    "sterimol_L",
    "smores_B1",
    "sterimol_B1",
    "smores_B5",
    "sterimol_B5",
)


def main() -> None:
    args = _get_command_line_arguments()
    args.output_file.parent.mkdir(parents=True, exist_ok=True)

    if not args.output_file.exists():
        _write_csv_header(args.output_file)

    with open(args.output_file, "a") as csv_file:
        writer = csv.DictWriter(csv_file, fieldnames=_OUTPUT_CSV_COLUMNS)

        num_successes = 0
        num_failures = 0
        for molecule in tuple(_get_molecules(args.input_file)):
            sterimol = _get_sterimol(molecule)
            smores = _get_smores(molecule)
            result = _get_result(smores, sterimol, args.success_tolerance)
            output_lines = (
                f"NAME: {molecule.name}",
                (
                    f"  SMORES L:  {smores.L_value:.3f}   "
                    f"STERIMOL L:  {sterimol.L_value:.3f}   "
                    f"DIFF: {abs(smores.L_value - sterimol.L_value):.3f}"
                ),
                (
                    f"  SMORES B1: {smores.B_1_value:.3f}   "
                    f"STERIMOL B1: {sterimol.B_1_value:.3f}   "
                    f"DIFF: {abs(smores.B_1_value - sterimol.B_1_value):.3f}"
                ),
                (
                    f"  SMORES B5: {smores.B_5_value:.3f}   "
                    f"STERIMOL B5: {sterimol.B_5_value:.3f}   "
                    f"DIFF: {abs(smores.B_5_value - sterimol.B_5_value):.3f}"
                ),
                f"RESULT: {result.value}",
            )
            print("\n".join(output_lines), end="\n\n")
            if result == Result.SUCCESS:
                num_successes += 1
            else:
                num_failures += 1

            writer.writerow(
                {
                    "name": molecule.name,
                    "smiles": molecule.smiles,
                    "xyz_file": molecule.xyz_file,
                    "dummy_index": molecule.dummy_index,
                    "attached_index": molecule.attached_index,
                    "smores_L": smores.L_value,
                    "sterimol_L": sterimol.L_value,
                    "smores_B1": smores.B_1_value,
                    "sterimol_B1": sterimol.B_1_value,
                    "smores_B5": smores.B_5_value,
                    "sterimol_B5": sterimol.B_5_value,
                },
            )

        print(f"TOTAL SUCCESSES: {num_successes}")
        print(f"TOTAL FAILURES: {num_failures}")


@dataclass(frozen=True, slots=True)
class Molecule:
    name: str
    smiles: str
    xyz_file: pathlib.Path
    dummy_index: int
    attached_index: int


def _get_molecules(
    path: pathlib.Path,
) -> typing.Iterator[Molecule]:

    with open(path) as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            yield Molecule(
                name=row["name"],
                smiles=row["smiles"],
                xyz_file=pathlib.Path(row["xyz_file"]),
                dummy_index=int(row["dummy_index"]),
                attached_index=int(row["attached_index"]),
            )


class Result(enum.Enum):
    SUCCESS = "SUCCESS"
    FAILURE = "FAILURE"


def _get_sterimol(molecule: Molecule) -> morfeus.Sterimol:
    elements, coordinates = morfeus.read_xyz(molecule.xyz_file)
    return morfeus.Sterimol(
        elements=elements,
        coordinates=coordinates,
        dummy_index=molecule.dummy_index + 1,
        attached_index=molecule.attached_index + 1,
    )


def _get_smores(molecule: Molecule) -> morfeus.Sterimol:
    elements, coordinates = morfeus.read_xyz(molecule.xyz_file)
    return morfeus.Sterimol(
        elements=elements,
        coordinates=coordinates,
        dummy_index=molecule.dummy_index + 1,
        attached_index=molecule.attached_index + 1,
        radii=[smores.streusel_radii[element] for element in elements],
    )


def _get_result(
    smores: morfeus.Sterimol,
    sterimol: morfeus.Sterimol,
    success_tolerance: float,
) -> Result:

    l_diff = abs(smores.L_value - sterimol.L_value)
    b1_diff = abs(smores.B_1_value - sterimol.B_1_value)
    b5_diff = abs(smores.B_5_value - sterimol.B_5_value)
    if (
        l_diff < success_tolerance
        and b1_diff < success_tolerance
        and b5_diff < success_tolerance
    ):
        return Result.SUCCESS
    else:
        return Result.FAILURE


def _write_csv_header(path: pathlib.Path) -> None:
    with open(path, "w") as csv_file:
        writer = csv.DictWriter(
            csv_file,
            fieldnames=_OUTPUT_CSV_COLUMNS,
        )
        writer.writeheader()


def _get_command_line_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Calculate and compare SMORES and sterimol parameters.",
    )

    parser.add_argument(
        "--input_file",
        help=(
            'A csv file with columns: "name", "smiles", '
            '"xyz_file", "dummy_index" and "attached_index".'
        ),
        type=pathlib.Path,
        default=pathlib.Path.cwd() / "2_output" / "xyz_files.csv",
    )
    parser.add_argument(
        "-o",
        "--output_file",
        type=pathlib.Path,
        default=pathlib.Path.cwd() / "3_output" / "parameter_validation.csv",
    )
    parser.add_argument(
        "--success_tolerance",
        help=(
            "The maximum allowed difference between SMORES and sterimol "
            "parameters for the validation to be considere a success."
        ),
        type=float,
        default=0.001,
    )
    return parser.parse_args()


if __name__ == "__main__":
    main()
